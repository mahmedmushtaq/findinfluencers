"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_express_1 = require("apollo-server-express");
var profileType = apollo_server_express_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type PlatformProfileInfo {\n    id: ID\n    platform: Platform\n    profileName: String\n    profileUrl: String\n    profileFollowers: String\n    user: User\n    rate: Int\n  }\n\n  type Profile {\n    id: ID\n    user: User\n    platformProfileInfo: [PlatformProfileInfo]\n    category: [Category]\n    images: [String]\n    description: String\n  }\n\n  type Rate {\n    \"\"\"\n    rateRange return [minRate, maxRate]\n    \"\"\"\n    # used to filter profile on the basis of the rate\n    rateRange: [Int]\n  }\n\n  input PlatformProfileInput {\n    \"\"\"\n    platformId is used to add new platform profile\n    \"\"\"\n    platformId: String\n    profileName: String!\n    profileUrl: String!\n    profileFollowers: Int!\n    rate: Int!\n    \"\"\"\n    id is used to update platformProfile data\n    \"\"\"\n    id: String\n  }\n\n  input ProfileInput {\n    platforms: [PlatformProfileInput!]!\n    categoryIds: [String!]!\n    description: String!\n  }\n\n  input SearchProfile {\n    platformName: String\n    categoryName: String\n    rateRange: [Int]\n  }\n\n  input userProfileInput {\n    username: String\n    userId: String\n  }\n\n  extend type Query {\n    myProfile: Profile\n    profileRates: Rate\n    searchProfile(input: SearchProfile, pageNum: Int): [Profile]\n    userProfile(input: userProfileInput): Profile\n  }\n\n  # input updateProfileInfo {\n  #   platform: [profilePlatformInput!]!\n  #   categoriesId: [String]\n  # }\n\n  extend type Mutation {\n    addProfileInfo(input: ProfileInput!, images: [Upload!]!): Profile\n    updateProfileInfo(input: ProfileInput, images: [Upload]): Profile\n    deletePlatformProfile(id: String): Profile\n  }\n"], ["\n  type PlatformProfileInfo {\n    id: ID\n    platform: Platform\n    profileName: String\n    profileUrl: String\n    profileFollowers: String\n    user: User\n    rate: Int\n  }\n\n  type Profile {\n    id: ID\n    user: User\n    platformProfileInfo: [PlatformProfileInfo]\n    category: [Category]\n    images: [String]\n    description: String\n  }\n\n  type Rate {\n    \"\"\"\n    rateRange return [minRate, maxRate]\n    \"\"\"\n    # used to filter profile on the basis of the rate\n    rateRange: [Int]\n  }\n\n  input PlatformProfileInput {\n    \"\"\"\n    platformId is used to add new platform profile\n    \"\"\"\n    platformId: String\n    profileName: String!\n    profileUrl: String!\n    profileFollowers: Int!\n    rate: Int!\n    \"\"\"\n    id is used to update platformProfile data\n    \"\"\"\n    id: String\n  }\n\n  input ProfileInput {\n    platforms: [PlatformProfileInput!]!\n    categoryIds: [String!]!\n    description: String!\n  }\n\n  input SearchProfile {\n    platformName: String\n    categoryName: String\n    rateRange: [Int]\n  }\n\n  input userProfileInput {\n    username: String\n    userId: String\n  }\n\n  extend type Query {\n    myProfile: Profile\n    profileRates: Rate\n    searchProfile(input: SearchProfile, pageNum: Int): [Profile]\n    userProfile(input: userProfileInput): Profile\n  }\n\n  # input updateProfileInfo {\n  #   platform: [profilePlatformInput!]!\n  #   categoriesId: [String]\n  # }\n\n  extend type Mutation {\n    addProfileInfo(input: ProfileInput!, images: [Upload!]!): Profile\n    updateProfileInfo(input: ProfileInput, images: [Upload]): Profile\n    deletePlatformProfile(id: String): Profile\n  }\n"])));
exports.default = profileType;
var templateObject_1;
